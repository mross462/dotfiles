function vsh(){
  export ECOSYSTEM="${1}"
  tsh login --proxy=teleport.$ECOSYSTEM.vnops.net:3080
  rm -rf ~/.kube/config
  tsh kube login $ECOSYSTEM
}

function restart(){
eval "ENVS=($ENVS)" 
for env in ${ENVS[@]}; do 
    deployments=$(kubectl -n $env get deployments | grep "$1" | awk '{print $1}')
    for dep in deploymments; do 
        kubectl -n $env rollout restart deployment/$dep
    done; 
done
}

function create_ecosystem_zshrc(){
rm -rf /tmp/teleport-zshrc-${1}
cat << EOF > /tmp/teleport-zshrc-${1}
#!/bin/zsh
tsh login --proxy=teleport.${1}.vnops.net:3080 --bind-addr=0.0.0.0:$(shuf -i 9000-9999 -n 1)
kubectl config use-context ${1}-${1}
eval $(vn infra ecosystem ${1} --output=env)
setopt PROMPT_SUBST
PROMPT="%n ${1}-\$ENVTYPE (\$ENVS) Â» "
EOF
echo $(which restart) >> /tmp/teleport-zshrc-${1}
}

function next () {
if ! [ -x "$(command -v docker)" ]; then
  echo 'Error: docker is not installed. Install and login with: \ 
        docker login venuenext-docker.jfog.io ' >&2
  exit 1
fi
create_ecosystem_zshrc ${1}
if [[ "$(uname)" == 'Darwin' ]]; then
osascript &> /dev/null <<EOF
tell application "iTerm2"
    set ${1} to (create window with default profile)
    tell current session of ${1}
        write text "
docker container kill next-${1}
docker container rm next-${1}

#Start the container
docker run --name next-${1} \
           --env ECOSYSTEM=${1} \
           --env AWS_DEFAULT_PROFILE=vnops \
           -v $HOME/.aws:/home/node/.aws \
           -v $HOME/.venuenext/:/home/node/.venuenext \
           -v $HOME/.op/:/home/node/.op \
           -v $HOME/.ssh/:/home/node/.ssh \
           -v $HOME/repos:/home/node/repos \
           -p $(cat /tmp/teleport-zshrc-${1} | grep bind | awk -F: '{print $3}'):$(cat /tmp/teleport-zshrc-${1} | grep bind | awk -F: '{print $3}')  \
           venuenext-docker.jfrog.io/eksutils:latest &
sleep 5

docker cp /tmp/teleport-zshrc-mars next-${1}:/home/node/.zshrc

docker exec -it next-${1} /bin/zsh
"
    end tell
end tell
EOF

else
  gnome-terminal -- zsh -c "\
  echo Starting container for $1
  docker container kill next-${1}
  docker container rm next-${1}
  docker run --name next-${1} \
             --env ECOSYSTEM=${1} \
             --env AWS_DEFAULT_PROFILE=vno \
             -v $HOME/.aws:/home/node/.aws:ro \
             -v $HOME/.venuenext/:/home/node/.venuenext:z \
             -v $HOME/.op/:/home/node/.op:z \
             -v $HOME/.ssh/:/home/node/.ssh:z \
             -v $HOME/repos:/home/node/repos:z \
             -p $(cat /tmp/teleport-zshrc-${1} | grep bind | awk -F: '{print $3}'):$(cat /tmp/teleport-zshrc-${1} | grep bind | awk -F: '{print $3}')  \
             venuenext-docker.jfrog.io/eksutils:latest &
  until docker ps | grep $ECOSYSTEM | grep Up; do sleep 1; done
  docker cp /tmp/teleport-zshrc-${1} next-${1}:/home/node/.zshrc
  docker exec -it next-${1} /bin/zsh
  exec bash
  "
fi
}

killnext(){
docker stop $(docker ps -aq)
docker rm $(docker ps | grep "next-" | grep -v "CONTAINER" | awk '{print $1}')
docker rmi $(docker images -q)
}