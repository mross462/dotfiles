#       _____            __
#      / ___/__  _______/ /____  ____ ___
#      \__ \/ / / / ___/ __/ _ \/ __ `__ \
#     ___/ / /_/ (__  ) /_/  __/ / / / / /
#    /____/\__, /____/\__/\___/_/ /_/ /_/
#         /____/

# Fingerprint Sudo For Macbooks.
sudo() {
  unset -f sudo
  if [[ "$(uname)" == 'Darwin' ]] && ! grep 'pam_tid.so' /etc/pam.d/sudo --silent; then
    sudo sed -i -e '1s;^;auth       sufficient     pam_tid.so\n;' /etc/pam.d/sudo
  fi
  sudo "$@"
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

#Take a quick 60 second screencast and upload it to google drive
function screencast() {
    osascript $HOME/Desktop/Cloud/Google\ Drive/Screencasts/screencast.scpt
    mv /tmp/test.mov $HOME/Desktop/Cloud/Google\ Drive/Screencasts
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

#Open Google Search From The Command Line:
google() {
    search=""
    echo "Searching StackOverflow for: '$*'"
    for term in $*; do
        search="$search%20$term"
    done

    if [[ `uname` == 'Darwin' ]]
    then
        open "http://www.google.com/search?q=$search"
    else
        xdg-open "http://www.google.com/search?q=$search"
    fi
}

#Open StackOverflow Search From The Command Line:
stack() {
    search=""
    echo "Searching StackOverflow for: '$*'"
    for term in $*; do
        search="$search%20$term"
    done

    if [[ `uname` == 'Darwin' ]]
    then
        open "http://stackoverflow.com/search?q=$search"
    else
        xdg-open "http://stackoverflow.com/search?q=$search"
    fi
}

#Preview Markdown in the Browser npm -g install marked
mdpreview(){

    which marked > /dev/null
    if [ $? -ne 0 ]; then
        echo "Please install marked. See: https://github.com/chjj/marked"
        terminate
    fi

    randomfilename="$RANDOM.html"
    cat $1 | marked -o $randomfilename

    if [[ `uname` == 'Darwin' ]]
    then
        open $randomfilename
    else
        xdg-open $randomfilename
    fi

    #Because your browser probably won't service the request before it's generated
    sleep 1

    rm -rf $randomfilename
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function findit() {
    find . -name \* -exec grep -iH $1 {} \;
}

#Quicksort Input
qsort()
{
    local L=""; local G=""; [ $# -eq 1 ] && echo $1 && return;
    P=$1; shift; for i in $@; do [ $i -lt $P ] && L="$L $i" || G="$G $i"; done
    [ -z "$L" ] || L=`qsort $L`; [ -z "$G" ] || G=`qsort $G`; echo "$L $P $G"
}

#Show Battery Life
function battery()
{
    ioreg -l | awk '$3~/Capacity/{c[$3]=$5}END{OFMT="%.2f%%";max=c["\"MaxCapacity\""];print(max>0?100*c["\"CurrentCapacity\""]/max:"?")}'
}

add-consul-elb() {
    echo "Enter Customer: "
    read c
    REGIONS=(us-east-1 us-west-1 eu-central-1 eu-west-1 sa-east-1 ap-south-1 ap-northeast-2 ap-southeast-1 ap-southeast-2 ap-northeast-1)
    for region in $REGIONS; do
        aws ec2 --region $region describe-vpcs --filters 'Name=tag:Name,Values=$c' | jq -r '.Vpcs[].VpcId' && break
    done
    for e in `echo production staging`; do
        aws ec2 --region $region describe-security-groups --filters "Name=tag:Name,Values=${c}-${e}-consul-elb"
        group_id=`aws ec2 --region $region describe-security-groups --filters "Name=tag:Name,Values=${c}-${e}-consul-elb" | jq -r '.[][].GroupId'`
        echo group_id: $group_id
        aws ec2 authorize-security-group-ingress --region $region --group-id $group_id --protocol tcp --port 443 --cidr `dig +short myip.opendns.com @resolver1.opendns.com`/32
    done
}

jump() {
    ssh -A -J mross@$(cat ~/.homeip) $1-jumphost.venuenext.net
}

oplogin () {
eval $(op signin vn_infrastructure)
}

#tsh login
tshto () {
  which yq > /dev/null 2>&1 || echo install yq
  which op  > /dev/null 2>&1 || echo install op
  yaml=$(vn infra ecosystem $1)
  ecosystem=$(echo $yaml | tail -n +2 | yq -r .name)
  env_type=$(echo $yaml | tail -n +2 | yq -r .env_type)
  echo Getting Credentials From Onepassword for "$ecosystem $env_type teleport login"
  echo Please login using your onepassword master password
  eval $(op signin vn_infrastructure)
  opjson=$(op get item "$ecosystem $env_type teleport login") ||
  username=$(echo ${opjson} | jq -r '.details.fields[] | select(.name == "username").value')
  password=$(echo ${opjson} | jq -r '.details.fields[] | select(.name == "password").value')
  echo $password | pbcopy
  echo Password coppied to clipboard, paste below.
  tsh login --proxy=teleport."$@".vnops.net --user=$username
}

jump(){
  echo "Please enter destination ECOSYSTEM: "
  read ECOSYSTEM
  echo "Please enter destination ENVTYPE: "
  read ENVTYPE
  eval $(op signin vn_infrastructure)
  rm -rf ~/.ssh/${ECOSYSTEM}_${ENVTYPE}
  op get item "${ECOSYSTEM}-${ENVTYPE} ssh key" --vault=InfraNext | jq -r ".details.notesPlain" | sed '1d;$d' > ~/.ssh/${ECOSYSTEM}_${ENVTYPE}
  op get item "${ECOSYSTEM}-${ENVTYPE} ssh key" --vault=InfraNext | jq -r ".details.password"
  chmod 400 ~/.ssh/${ECOSYSTEM}_${ENVTYPE}
  /usr/bin/ssh -i ~/.ssh/${ECOSYSTEM}_${ENVTYPE} ubuntu@jumphost.${ECOSYSTEM}.vnops.net
}

function vnops () {
    local cmd=""
    local cdto="$PWD"
    local args="$@"

    if [ -d "$1" ]; then
        cdto=`cd "$1"; pwd`
        args="${@:2}"
    fi

    if [ -n "$args" ]; then
        cmd="; $args"
    fi

    osascript &>/dev/null <<EOF
    tell application "iTerm2"
        set newWindow to (create window with default profile)
    end tell
EOF
}

function watchpods () {
    local cmd=""
    local cdto="$PWD"
    local args="$@"

    if [ -d "$1" ]; then
        cdto=`cd "$1"; pwd`
        args="${@:2}"
    fi

    if [ -n "$args" ]; then
        cmd="; $args"
    fi

    osascript &>/dev/null <<EOF
    tell application "iTerm2"
        set newWindow to (create window with default profile)
        tell current session of newWindow
            write text "watch kubectl -n prd get pods"
        end tell
    end tell
EOF
}

function vsh(){
  export ECOSYSTEM="${1}"
  tsh login --proxy=teleport.$ECOSYSTEM.vnops.net:3080
  rm -rf ~/.kube/config
  tsh kube login $ECOSYSTEM
}

function create_zshrc(){
eval $(vn infra ecosystem ${1} --output=env)
rm -rf /tmp/teleport-zshrc-${1}
cat << EOF > /tmp/teleport-zshrc-${1}
#!/bin/zsh
tsh login --proxy=teleport.${1}.vnops.net:3080 --bind-addr=0.0.0.0:$(shuf -i 9000-9999 -n 1)
kubectl config use-context ${1}-${1}
eval $(vn infra ecosystem ${1} --output=env)
setopt PROMPT_SUBST
PROMPT="%n ${1}-$ENVTYPE ($ENVS) » "
EOF
}

function next () {
create_zshrc ${1}
osascript &> /dev/null <<EOF
tell application "iTerm2"
    set ${1} to (create window with default profile)
    tell current session of ${1}
        write text "
docker container kill next-${1}
docker container rm next-${1}

#Start the container
docker run --name next-${1} \
           --env ECOSYSTEM=${1} \
           --env AWS_DEFAULT_PROFILE=vnops \
           -v $HOME/.aws:/home/vn/.aws \
           -v $HOME/.venuenext/:/home/vn/.venuenext \
           -v $HOME/.op/:/home/vn/.op \
           -v $HOME/.ssh/:/home/vn/.ssh \
           -v $HOME/repos:/home/vn/repos \
           -p $(cat /tmp/teleport-zshrc-${1} | grep bind | awk -F: '{print $3}'):$(cat /tmp/teleport-zshrc-${1} | grep bind | awk -F: '{print $3}')  \
           venuenext-docker.jfrog.io/eksutils:latest &
sleep 5

docker cp /tmp/teleport-zshrc-mars next-${1}:/home/vn/.zshrc

docker exec -it next-${1} /bin/zsh
"
    end tell
end tell
EOF
}

killnext(){
docker stop $(docker ps -aq)
docker rm $(docker ps | grep "next-" | grep -v "CONTAINER" | awk '{print $1}')
docker rmi $(docker images -q)
}
