#       _____            __
#      / ___/__  _______/ /____  ____ ___
#      \__ \/ / / / ___/ __/ _ \/ __ `__ \
#     ___/ / /_/ (__  ) /_/  __/ / / / / /
#    /____/\__, /____/\__/\___/_/ /_/ /_/
#         /____/

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

#Take a quick 60 second screencast and upload it to google drive
function screencast() {
    osascript $HOME/Desktop/Cloud/Google\ Drive/Screencasts/screencast.scpt
    mv /tmp/test.mov $HOME/Desktop/Cloud/Google\ Drive/Screencasts
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

#Open Google Search From The Command Line:
google() {
    search=""
    echo "Searching StackOverflow for: '$*'"
    for term in $*; do
        search="$search%20$term"
    done

    if [[ `uname` == 'Darwin' ]]
    then
        open "http://www.google.com/search?q=$search"
    else
        xdg-open "http://www.google.com/search?q=$search"
    fi
}

#Open StackOverflow Search From The Command Line:
stack() {
    search=""
    echo "Searching StackOverflow for: '$*'"
    for term in $*; do
        search="$search%20$term"
    done

    if [[ `uname` == 'Darwin' ]]
    then
        open "http://stackoverflow.com/search?q=$search"
    else
        xdg-open "http://stackoverflow.com/search?q=$search"
    fi
}

#Preview Markdown in the Browser npm -g install marked
mdpreview(){

    which marked > /dev/null
    if [ $? -ne 0 ]; then
        echo "Please install marked. See: https://github.com/chjj/marked"
        terminate
    fi

    randomfilename="$RANDOM.html"
    cat $1 | marked -o $randomfilename

    if [[ `uname` == 'Darwin' ]]
    then
        open $randomfilename
    else
        xdg-open $randomfilename
    fi

    #Because your browser probably won't service the request before it's generated
    sleep 1

    rm -rf $randomfilename
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function findit() {
    find . -name \* -exec grep -iH $1 {} \;
}

function accountInfo(){
    echo "☁  MezeoCloud Says:"
    echo 'Cloud Resource:'
    curl -k -u $1:$2 https://$3/v2 -H 'X-Client-Specification: 3' \-H 'Content-Type: application/vnd.csp.cloud+json' | python2.6 -mjson.tool
    echo
    echo 'Account Resource'
    curl -k -u $1:$2 https://$3/v2/account -H 'Content-Type: application/vnd.csp.account-info2+json' -H 'Accept: application/vnd.csp.account-info2+json' | python2.6 -mjson.tool
    echo
}

function redo_chef(){
    knife client delete administrator
    cp $HOME/dev/services/chef_server/creds/*.pem ~/.chef/
    knife configure -u administrator -k ~/.chef/administrator.pem -s http://services.cloud:4000 --defaults -r .
}


#Quicksort Input
qsort()
{
    local L=""; local G=""; [ $# -eq 1 ] && echo $1 && return;
    P=$1; shift; for i in $@; do [ $i -lt $P ] && L="$L $i" || G="$G $i"; done
    [ -z "$L" ] || L=`qsort $L`; [ -z "$G" ] || G=`qsort $G`; echo "$L $P $G"
}

#Show Battery Life
function battery()
{
    ioreg -l | awk '$3~/Capacity/{c[$3]=$5}END{OFMT="%.2f%%";max=c["\"MaxCapacity\""];print(max>0?100*c["\"CurrentCapacity\""]/max:"?")}'
}

#Attributes Grep
agrep() {for i in $(find . -type f -name 'attributes*.json'); do echo $i; sops -d $i | grep $1; done}

add-consul-elb() {
    echo "Enter Customer: "
    read c
    REGIONS=(us-east-1 us-west-1 eu-central-1 eu-west-1 sa-east-1 ap-south-1 ap-northeast-2 ap-southeast-1 ap-southeast-2 ap-northeast-1)
    for region in $REGIONS; do
        aws ec2 --region $region describe-vpcs --filters 'Name=tag:Name,Values=$c' | jq -r '.Vpcs[].VpcId' && break
    done
    for e in `echo production staging`; do
        aws ec2 --region $region describe-security-groups --filters "Name=tag:Name,Values=${c}-${e}-consul-elb"
        group_id=`aws ec2 --region $region describe-security-groups --filters "Name=tag:Name,Values=${c}-${e}-consul-elb" | jq -r '.[][].GroupId'`
        echo group_id: $group_id
        aws ec2 authorize-security-group-ingress --region $region --group-id $group_id --protocol tcp --port 443 --cidr `dig +short myip.opendns.com @resolver1.opendns.com`/32
    done
}

jump() {
    ssh -A -J mross@$(cat ~/.homeip) $1-jumphost.venuenext.net
}
